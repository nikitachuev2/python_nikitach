
def hash_func(word):
    """Хеш-функция для вычисления индекса на основе входного слова."""
    temp = ''
    for char in word:  # Проходим по каждому символу входного слова
        temp += str(ord(char))  # Получаем ASCII-код символа и добавляем его к строке
    return int(temp) % 128  # Возвращаем хеш-индекс в диапазоне [0, 128)


def insert(hash_table):
    """Вставка слова в хеш-таблицу с использованием квадратичного пробирования."""
    while True:  # Бесконечный цикл для ввода значений
        input_value = input('Введите слово (или "exit" для выхода): ')  # Запрашиваем слово у пользователя
        if input_value.lower() == "exit":  # Проверяем, не хочет ли пользователь выйти из программы
            break
        
        k = hash_func(input_value)  # Вычисляем хеш-индекс для слова
        atemp = 1  # Переменная, используемая для квадратичного пробирования
        # Цикл для разрешения коллизий
        while hash_table.get(k) is not None:  # Пока индекс занят
            k = (k + atemp ** 2) % 128  # Используем квадратичное пробирование для нахождения нового индекса
            atemp += 1  # Увеличиваем atemp для пробирования
        
        hash_table[k] = input_value  # Вставляем новое слово в хеш-таблицу


def display(hash_table):
    """Вывод содержимого хеш-таблицы."""
    for index, value in hash_table.items():  # Проходим по всем элементам хеш-таблицы
        if value is not None:  # Если значение не пустое
            print(f"Index {index}: {value}")  # Выводим индекс и значение


# Основной код
hash_table = {}  # Создаем пустую хеш-таблицу в виде словаря

insert(hash_table)  # Вызываем функцию вставки для заполнения хеш-таблицы
display(hash_table)  # Выводим содержимое хеш-таблицы

