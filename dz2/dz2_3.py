
# Запрашиваем у пользователя размер матрицы
n = int(input("Введите размер матрицы (n x n): "))


# Создаем пустую матрицу
matrix = []
for _ in range(n):
    row = []
    for _ in range(n):
        value = int(input(f"Введите элемент матрицы [{len(matrix)}][{len(row)}]: "))
        row.append(value)
    matrix.append(row)

#В этом блоке кода мы сначала запрашиваем у пользователя размер матрицы n. Затем мы создаем пустую матрицу matrix, используя вложенные циклы for. Внутренний цикл формирует каждую строку матрицы, а внешний цикл добавляет эти строки в итоговую матрицу. Пользователь вводит значение каждого элемента матрицы.

# Вычисление дискриминанта матрицы
discriminant = 0
for i in range(n):
    row = matrix[i]
    discriminant += row[i] * (row[(i+1)%n] * row[(i+2)%n] - row[(i+1)%n] * row[(i+2)%n])
    discriminant -= row[i] * (row[(i-1)%n] * row[(i-2)%n] - row[(i-1)%n] * row[(i-2)%n])

#В этом блоке мы вычисляем дискриминант матрицы. Для этого мы используем формулу вычисления дискриминанта квадратной матрицы:

# discriminant = sum(a_ii * (a_i,i+1 * a_i,i+2 - a_i,i+1 * a_i,i+2)) -                sum(a_ii * (a_i,i-1 * a_i,i-2 - a_i,i-1 * a_i,i-2))

#Где a_ij - это элемент матрицы на позиции (i, j). Мы используем цикл for для итерации по строкам матрицы и вычисляем дискриминант в соответствии с этой формулой.
#стоит отметить, что мы используем (i+1)%n и (i-1)%n для обеспечения циклической нумерации индексов, чтобы не выходить за пределы матрицы.

# Вывод результата
print("Дискриминант матрицы:", discriminant)
